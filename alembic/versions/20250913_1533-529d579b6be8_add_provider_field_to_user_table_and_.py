"""Add provider field to user table and update timestamp mixin

Revision ID: 529d579b6be8
Revises: 8ccf2530754e
Create Date: 2025-09-13 15:33:16.770864+09:00

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "529d579b6be8"
down_revision: Union[str, Sequence[str], None] = "8ccf2530754e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Add provider column to user table
    # Update updated_at column to have onupdate behavior
    op.alter_column(
        "user",
        "updated_at",
        existing_type=sa.DateTime(),
        nullable=False,
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
    )

    op.drop_constraint(op.f("user_consent_ibfk_1"), "user_consent", type_="foreignkey")
    op.create_foreign_key(None, "user_consent", "user", ["user_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Revert unique constraint
    op.drop_constraint("uq_provider_social_id", "user", type_="unique")
    op.create_unique_constraint("social_id", "user", ["social_id"])

    # Remove provider column
    op.drop_column("user", "provider")

    # Revert updated_at column changes
    op.alter_column("user", "updated_at", existing_type=sa.DateTime(), nullable=False, server_default=None)

    op.drop_constraint(None, "user_consent", type_="foreignkey")
    op.create_foreign_key(op.f("user_consent_ibfk_1"), "user_consent", "user", ["user_id"], ["id"], ondelete="CASCADE")
    # ### end Alembic commands ###
